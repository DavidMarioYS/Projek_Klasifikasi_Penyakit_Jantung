# -*- coding: utf-8 -*-
"""Projek Pertama - Klasifikasi Penyakit Jantung.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fmG2gYQYWr9Fznj4QFq8LkvrvP8--cGU

---
# **Projek Pertama - Klasifikasi Penyakit Jantung**


---
Author : `David Mario Yohanes Samosir`

# CRISP - DM
## 1. Data Understanding
- Memprediksi apakah seseorang terjangkit penyakit jantung berdasarkan beberapa atribut kesehatan

## 2. Data Preparation
- Dataset: [Heart_disease](https://www.kaggle.com/datasets/dharanireddy/heart-disease)

- Fitur yang digunakan:
    1. age - Usia dalam tahun
    2. sex - (1 = male; 0 = female)
    3. cp - chest pain type
      - 0: Typical angina: nyeri dada terkait mengurangi suplai darah ke jantung
      - 1: Atypical angina: nyeri dada tidak berhubungan dengan jantung
      - 2: Non-anginal pain: biasanya kejang esofagus (tidak berhubungan dengan jantung)
      - 3: Asymptomatic: nyeri dada tidak menunjukkan tanda-tanda penyakit
    4. trestbps - mengistirahatkan tekanan darah (dalam mm Hg saat masuk ke rumah sakit)
      - di atas 130-140 biasanya memprihatinkan
    5. chol - serum cholestoral dalam mg/dl
      - serum = LDL + HDL + .2 * triglycerides
      - di atas 200 yang memprihatinkan
    6. fbs - (fasting blood sugar > 120 mg/dl) (1 = true; 0 = false)
      - '>126' mg/dL signals diabetes
    7. restecg - resting electrocardiographic results
      - 0: Tidak ada yang perlu diperhatikan
      - 1: ST-T Wave abnormality
        - dapat berkisar dari gejala ringan hingga masalah parah
        - sinyal detak jantung yang tidak normal
      - 2: Possible or definite left ventricular hypertrophy
        - Ruang pompa utama jantung yang diperbesar
    8. thalach - denyut jantung maksimum tercapai
    9. exang - latihan diinduksi angina (1 = yes; 0 = no)
    10. oldpeak - Depresi ST yang disebabkan oleh olahraga relatif terhadap istirahat
      - melihat stres jantung saat berolahraga
      - jantung yang tidak sehat akan lebih stres
    11. slope - kemiringan segmen ST latihan puncak
      - 0: Upsloping: detak jantung yang lebih baik dengan olahraga (tidak biasa)
      - 1: Flatsloping: perubahan minimal (jantung sehat yang khas)
      - 2: Downslopins: tanda-tanda jantung yang tidak sehat
    12. ca - jumlah pembuluh darah utama (0-3) diwarnai oleh flourosopy
      - pembuluh berwarna berarti dokter dapat melihat darah yang melewatinya
      - semakin banyak gerakan darah semakin baik (tidak ada gumpalan)
    13. thal - hasil stres thalium
      - 1,3: normal
      - 6: fixed defect: dulu cacat tapi sekarang baik-baik saja
      - 7: reversable defect: tidak ada gerakan darah yang tepat saat berolahraga
    14. target - memiliki penyakit atau tidak (1=yes, 0=no) (= atribut yang diprediksi)

## 3. Data Wrangling
Langkah-langkah:

- Muat dataset dan pahami struktur data.
- Identifikasi dan tangani missing values jika ada.
- Lakukan encoding untuk variabel kategorikal jika diperlukan.
- Lakukan normalisasi atau standarisasi data untuk mempersiapkan fitur-fitur numerik.

## 4. Model Training
Langkah-langkah:

- Bagi dataset menjadi training set dan testing set.
- Pilih beberapa model klasifikasi seperti Logistic Regression, Random Forest, atau SVM.
- Latih model menggunakan training set.

## 5. Model Testing
Langkah-langkah:

- Gunakan model yang telah dilatih untuk membuat prediksi menggunakan testing set.

## 6. Model Evaluation
Langkah-langkah:

- Evaluasi model menggunakan berbagai metrik seperti accuracy, precision, recall, dan F1-score.
- Analisis confusion matrix untuk memahami performa model lebih lanjut.

# Instalasi Libraries
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import files

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

import joblib
import pickle

"""# Data Wrangling

## Gathering Data

### Upload File
"""

# Mengunggah file dari komputer lokal
uploaded = files.upload()

# Contoh: Menyimpan file yang diunggah ke dalam file lokal di Colab
with open('heart.csv', 'wb') as f:
    f.write(uploaded['heart.csv'])

# Load Dataset
dataset = pd.read_csv('./heart.csv')

dataset

"""## Assessing Data"""

print(dataset.shape)

dataset.isnull().sum()

dataset.describe()

dataset.duplicated().sum()

# Cari tahu berapa banyak nilai dari age
dataset.age.value_counts()

# Cari tahu berapa banyak nilai dari sex
dataset.sex.value_counts()

# Cari tahu berapa banyak nilai dari nyeri dada (cp)
dataset.cp.value_counts()

# Cari tahu berapa banyak nilai dari tekanan darah
dataset.trestbps.value_counts()

# Cari tahu berapa banyak nilai dari kolestrol
dataset.chol.value_counts()

# Cari tahu berapa banyak nilai dari kadar diabetes
dataset.fbs.value_counts()

# Cari tahu berapa banyak nilai dari aktivitas jantung
dataset.restecg.value_counts()

# Cari tahu berapa banyak nilai dari denyut jantung
dataset.thalach.value_counts()

# Cari tahu berapa banyak nilai dari latihan diinduksi angina
dataset.exang.value_counts()

# Cari tahu berapa banyak nilai dari olahraga
dataset.oldpeak.value_counts()

# Cari tahu berapa banyak nilai dari kemiringan segmen ST
dataset.slope.value_counts()

# Cari tahu berapa banyak nilai dari jumlah pembuluh darah
dataset.ca.value_counts()

# Cari tahu berapa banyak nilai dari hasil stress thalium
dataset.thal.value_counts()

# Cari tahu berapa banyak nilai dari target
dataset.target.value_counts()

# Histogram untuk kolom numerik
dataset.hist(bins=50, figsize=(20, 15))
plt.show()

# Boxplot untuk mendeteksi outlier
sns.boxplot(data=dataset.select_dtypes(include=['float64', 'int64']))
plt.show()

for column in dataset.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 6))
    sns.distplot(dataset[column].dropna(), kde=True)
    plt.title(f'Distribusi dari {column}')
    plt.show()

"""## Cleaning Data"""

# Menghapus baris yang duplikat
dataset.drop_duplicates(inplace=True)
print("Jumlah nilai duplikat:", dataset.duplicated().sum())

"""# Exploratory Data Analysis (EDA)"""

# Matriks korelasi
corr_matrix = dataset.corr()
corr_matrix

# Heatmap korelasi
plt.figure(figsize=(12, 10))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.show()

"""<h3> Frekuensi Jenis Kelamin"""

# Frekuensi jenis kelamin
sex_counts = dataset["sex"].value_counts()
print("Frekuensi Jenis Kelamin:")
print(sex_counts)

# Visualisasi frekuensi jenis kelamin
sns.countplot(x="sex", data=dataset)
plt.title("Frekuensi Jenis Kelamin")
plt.xlabel("Jenis Kelamin (0 = Perempuan, 1 = Laki-laki)")
plt.ylabel("Jumlah")
plt.show()

"""<h3> Distribusi Usia"""

# Statistik deskriptif untuk usia
age_stats = dataset["age"].describe()
print("Statistik Deskriptif Usia:")
print(age_stats)

# Visualisasi distribusi usia
sns.histplot(dataset["age"], bins=15, kde=True)
plt.title("Distribusi Usia")
plt.xlabel("Usia")
plt.ylabel("Frekuensi")
plt.show()

"""<h3> Distribusi Target"""

# Frekuensi target
target_counts = dataset["target"].value_counts()
print("Frekuensi Target:")
print(target_counts)

# Visualisasi distribusi target
sns.countplot(x="target", data=dataset)
plt.title("Distribusi Target")
plt.xlabel("Target (0 = Tidak Ada Penyakit Jantung, 1 = Ada Penyakit Jantung)")
plt.ylabel("Jumlah")
plt.show()

"""### Korelasi Berdasarkan Target

<h3> Rata-rata Tekanan Darah Berdasarkan Target
"""

# Rata-rata tekanan darah berdasarkan target
mean_trestbps_by_target = dataset.groupby("target")["trestbps"].mean()
print("Rata-rata Tekanan Darah Berdasarkan Target:")
print(mean_trestbps_by_target)

# Box plot untuk tekanan darah berdasarkan target
sns.boxplot(x="target", y="trestbps", data=dataset)
plt.title("Tekanan Darah Berdasarkan Target")
plt.xlabel("Target")
plt.ylabel("Tekanan Darah")
plt.show()

"""<h3> Distribusi Nyeri Dada"""

# Distribusi nyeri dada berdasarkan target
cp_distribution = dataset.groupby("target")["cp"].value_counts().unstack()
print("Distribusi Nyeri Dada Berdasarkan Target:")
print(cp_distribution)

# Count plot untuk nyeri dada berdasarkan target
sns.countplot(x="cp", hue="target", data=dataset)
plt.title("Distribusi Nyeri Dada Berdasarkan Target")
plt.xlabel("Tipe Nyeri Dada")
plt.ylabel("Jumlah")
plt.legend(title="Target")
plt.show()

"""<h3> Rata-rata Cholesterol Berdasarkan Target"""

# Rata-rata cholesterol berdasarkan target
mean_chol_by_target = dataset.groupby("target")["chol"].mean()
print("Rata-rata Cholesterol Berdasarkan Target:")
print(mean_chol_by_target)

# Box plot untuk cholesterol berdasarkan target
sns.boxplot(x="target", y="chol", data=dataset)
plt.title("Cholesterol Berdasarkan Target")
plt.xlabel("Target")
plt.ylabel("Cholesterol")
plt.show()

"""<h3> Frekuensi Fasting Blood Sugar (FBS) Berdasarkan Target"""

# Distribusi fasting blood sugar berdasarkan target
fbs_distribution = dataset.groupby("target")["fbs"].value_counts().unstack()
print("Distribusi Fasting Blood Sugar Berdasarkan Target:")
print(fbs_distribution)

# Count plot untuk fasting blood sugar berdasarkan target
sns.countplot(x="fbs", hue="target", data=dataset)
plt.title("Fasting Blood Sugar Berdasarkan Target")
plt.xlabel("Fasting Blood Sugar")
plt.ylabel("Jumlah")
plt.legend(title="Target")
plt.show()

"""<h3> Rata-rata Denyut Jantung Maksimum Berdasarkan Target"""

# Rata-rata denyut jantung maksimum berdasarkan target
mean_thalach_by_target = dataset.groupby("target")["thalach"].mean()
print("Rata-rata Denyut Jantung Maksimum Berdasarkan Target:")
print(mean_thalach_by_target)

# Box plot untuk denyut jantung maksimum berdasarkan target
sns.boxplot(x="target", y="thalach", data=dataset)
plt.title("Denyut Jantung Maksimum Berdasarkan Target")
plt.xlabel("Target")
plt.ylabel("Denyut Jantung Maksimum")
plt.show()

"""<h3> Frekuensi Hasil Electrocardiographic Berdasarkan Target"""

# Distribusi hasil electrocardiographic berdasarkan target
restecg_distribution = dataset.groupby("target")["restecg"].value_counts().unstack()
print("Distribusi Hasil Electrocardiographic Berdasarkan Target:")
print(restecg_distribution)

# Count plot untuk hasil electrocardiographic berdasarkan target
sns.countplot(x="restecg", hue="target", data=dataset)
plt.title("Hasil Electrocardiographic Berdasarkan Target")
plt.xlabel("Hasil Electrocardiographic")
plt.ylabel("Jumlah")
plt.legend(title="Target")
plt.show()

"""<h3> Rata-rata Depresi ST Berdasarkan Target"""

# Rata-rata depresi ST berdasarkan target
mean_oldpeak_by_target = dataset.groupby("target")["oldpeak"].mean()
print("Rata-rata Depresi ST Berdasarkan Target:")
print(mean_oldpeak_by_target)

# Box plot untuk depresi ST berdasarkan target
sns.boxplot(x="target", y="oldpeak", data=dataset)
plt.title("Depresi ST Berdasarkan Target")
plt.xlabel("Target")
plt.ylabel("Depresi ST")
plt.show()

"""<h3> Frekuensi Latihan Induksi Angina Berdasarkan Target"""

# Distribusi latihan induksi angina berdasarkan target
exang_distribution = dataset.groupby("target")["exang"].value_counts().unstack()
print("Distribusi Latihan Induksi Angina Berdasarkan Target:")
print(exang_distribution)

# Count plot untuk latihan induksi angina berdasarkan target
sns.countplot(x="exang", hue="target", data=dataset)
plt.title("Latihan Induksi Angina Berdasarkan Target")
plt.xlabel("Latihan Induksi Angina")
plt.ylabel("Jumlah")
plt.legend(title="Target")
plt.show()

"""<h3> Rata-rata Pembuluh Darah Utama Berdasarkan Target"""

# Rata-rata pembuluh darah utama berdasarkan target
mean_ca_by_target = dataset.groupby("target")["ca"].mean()
print("Rata-rata Pembuluh Darah Utama Berdasarkan Target:")
print(mean_ca_by_target)

# Box plot untuk pembuluh darah utama berdasarkan target
sns.boxplot(x="target", y="ca", data=dataset)
plt.title("Pembuluh Darah Utama Berdasarkan Target")
plt.xlabel("Target")
plt.ylabel("Pembuluh Darah Utama")
plt.show()

"""<h3> Frekuensi Hasil Stres Thalium Berdasarkan Target"""

# Distribusi hasil stres thalium berdasarkan target
thal_distribution = dataset.groupby("target")["thal"].value_counts().unstack()
print("Distribusi Hasil Stres Thalium Berdasarkan Target:")
print(thal_distribution)

# Count plot untuk hasil stres thalium berdasarkan target
sns.countplot(x="thal", hue="target", data=dataset)
plt.title("Hasil Stres Thalium Berdasarkan Target")
plt.xlabel("Hasil Stres Thalium")
plt.ylabel("Jumlah")
plt.legend(title="Target")
plt.show()

"""<h3>

### Korelasi Berdasarkan Nyeri Dada
"""

# Grouping by age, sex and chest pain type and calculating the mean
cp_relation = dataset.groupby(["age", "sex", "cp"]).size().reset_index(name='counts')
print("Hubungan Usia, Jenis Kelamin, dan Tipe Nyeri Dada:")
print(cp_relation)

# Visualisasi hubungan usia, jenis kelamin, dan tipe nyeri dada
plt.figure(figsize=(12, 6))
sns.scatterplot(data=dataset, x="age", y="cp", hue="sex", palette="deep")
plt.title("Hubungan Usia, Jenis Kelamin, dan Tipe Nyeri Dada")
plt.xlabel("Usia")
plt.ylabel("Tipe Nyeri Dada")
plt.legend(title="Jenis Kelamin", loc='upper right')
plt.show()

"""### Korelasi Berdasarkan Kolestrol"""

# Grouping by age, sex and cholesterol and calculating the mean
chol_relation = dataset.groupby(["age", "sex", "chol"]).size().reset_index(name='counts')
print("Hubungan Usia, Jenis Kelamin, dan Kolestrol:")
print(chol_relation)

# Visualisasi hubungan usia, jenis kelamin, dan kolesterol
plt.figure(figsize=(12, 6))
sns.scatterplot(data=dataset, x="age", y="chol", hue="sex", palette="deep")
plt.title("Hubungan Usia, Jenis Kelamin, dan Kolesterol")
plt.xlabel("Usia")
plt.ylabel("Kolesterol")
plt.legend(title="Jenis Kelamin", loc='upper right')
plt.show()

"""### Korelasai Berdasarkan Denyut Jantung Maksimum"""

# Grouping by age, sex and maximum heart rate and calculating the mean
thalach_relation = dataset.groupby(["age", "sex", "thalach"]).size().reset_index(name='counts')
print("Hubungan Usia, Jenis Kelamin, dan Denyut Jantung Maksimum:")
print(thalach_relation)

# Visualisasi hubungan usia, jenis kelamin, dan denyut jantung maksimum
plt.figure(figsize=(12, 6))
sns.scatterplot(data=dataset, x="age", y="thalach", hue="sex", palette="deep")
plt.title("Hubungan Usia, Jenis Kelamin, dan Denyut Jantung Maksimum")
plt.xlabel("Usia")
plt.ylabel("Denyut Jantung Maksimum")
plt.legend(title="Jenis Kelamin", loc='upper right')
plt.show()

"""### Korelasi Berdasarkan Olahraga"""

# Grouping by age, sex and ST depression induced by exercise and calculating the mean
oldpeak_relation = dataset.groupby(["age", "sex", "oldpeak"]).size().reset_index(name='counts')
print("Hubungan Usia, Jenis Kelamin, dan Depresi ST (Oldpeak):")
print(oldpeak_relation)

# Visualisasi hubungan usia, jenis kelamin, dan depresi ST (oldpeak)
plt.figure(figsize=(12, 6))
sns.scatterplot(data=dataset, x="age", y="oldpeak", hue="sex", palette="deep")
plt.title("Hubungan Usia, Jenis Kelamin, dan Depresi ST (Oldpeak)")
plt.xlabel("Usia")
plt.ylabel("Depresi ST (Oldpeak)")
plt.legend(title="Jenis Kelamin", loc='upper right')
plt.show()

"""# Pembuatan Model Klasifikasi
1. K-Nearest Neighbors (KNN)
2. Support Vector Machine (SVM)
3. Random Forest (RF)
"""

# Load dataset
dataset.columns = ["age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "target"]

# Preprocessing
dataset = dataset.replace('?', np.nan)
dataset = dataset.dropna()
dataset['target'] = dataset['target'].apply(lambda x: 1 if x > 0 else 0)

# Features and Target
X = dataset.drop("target", axis=1)
y = dataset["target"]

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Model Initialization
models = {
    "K-Nearest Neighbors": KNeighborsClassifier(),
    "Support Vector Machine": SVC(),
    "Random Forest": RandomForestClassifier()
}

# Train and Evaluate Models
results = {}
for model_name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    results[model_name] = {
        "accuracy": accuracy,
        "classification_report": classification_report(y_test, y_pred),
        "confusion_matrix": confusion_matrix(y_test, y_pred)
    }

# Print the results
for model_name, metrics in results.items():
    print(f"{model_name}:")
    print(f"Accuracy: {metrics['accuracy']:.2f}")
    print("Classification Report:")
    print(metrics["classification_report"])
    print("Confusion Matrix:")
    print(metrics["confusion_matrix"])
    print("\n")

# Visualizing the Confusion Matrix for each model
for model_name, metrics in results.items():
    plt.figure(figsize=(6,4))
    sns.heatmap(metrics["confusion_matrix"], annot=True, fmt="d", cmap="Blues")
    plt.title(f"Confusion Matrix for {model_name}")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.show()

"""# Testing Model"""

# from sklearn.externals import joblib

# Misalkan model yang ingin disimpan adalah model KNN
knn_model = models["K-Nearest Neighbors"]
joblib.dump(knn_model, 'knn_model.pkl')

# Misalkan model SVM
svm_model = models["Support Vector Machine"]
joblib.dump(svm_model, 'svm_model.pkl')

# Misalkan model Random Forest
rf_model = models["Random Forest"]
joblib.dump(rf_model, 'rf_model.pkl')

# Fungsi untuk prediksi berdasarkan model yang telah disimpan
def predict_with_saved_model(model_file, input_data):
    loaded_model = joblib.load(model_file)
    predicted = loaded_model.predict(input_data)
    return predicted

# Contoh input data dari pengguna
user_input = {
    "age": 50,
    "sex": 1,  # 1 untuk laki-laki, 0 untuk perempuan
    "cp": 2,
    "trestbps": 140,
    "chol": 260,
    "fbs": 0,
    "restecg": 1,
    "thalach": 120,
    "exang": 1,
    "oldpeak": 1.5,
    "slope": 1,
    "ca": 0,
    "thal": 3
}

# Transformasi input menjadi format yang bisa diprediksi
input_data = scaler.transform([list(user_input.values())])

# Prediksi dengan masing-masing model
knn_prediction = predict_with_saved_model('knn_model.pkl', input_data)
svm_prediction = predict_with_saved_model('svm_model.pkl', input_data)
rf_prediction = predict_with_saved_model('rf_model.pkl', input_data)

# Output hasil prediksi
print("Hasil Prediksi untuk KNN:", knn_prediction[0])
print("Hasil Prediksi untuk SVM:", svm_prediction[0])
print("Hasil Prediksi untuk Random Forest:", rf_prediction[0])

user_input = {
    "age": 40,
    "sex": 0,  # 1 untuk laki-laki, 0 untuk perempuan
    "cp": 1,
    "trestbps": 120,
    "chol": 200,
    "fbs": 0,
    "restecg": 0,
    "thalach": 160,
    "exang": 0,
    "oldpeak": 0.5,
    "slope": 2,
    "ca": 1,
    "thal": 2
}

# Transformasi input menjadi format yang bisa diprediksi
input_data = scaler.transform([list(user_input.values())])

# Prediksi dengan masing-masing model
knn_prediction = predict_with_saved_model('knn_model.pkl', input_data)
svm_prediction = predict_with_saved_model('svm_model.pkl', input_data)
rf_prediction = predict_with_saved_model('rf_model.pkl', input_data)

# Output hasil prediksi
print("Hasil Prediksi untuk KNN:", knn_prediction[0])
print("Hasil Prediksi untuk SVM:", svm_prediction[0])
print("Hasil Prediksi untuk Random Forest:", rf_prediction[0])

# Input data pengguna
user_input = {
    "age": 65,
    "sex": 0,  # Perempuan
    "cp": 1,   # Atypical angina
    "trestbps": 145,
    "chol": 280,
    "fbs": 1,  # Fasting blood sugar > 120 mg/dl
    "restecg": 0,  # Normal resting electrocardiographic results
    "thalach": 130,
    "exang": 1,  # Ada latihan diinduksi angina
    "oldpeak": 2.0,
    "slope": 1,  # Flatsloping
    "ca": 2,  # 2 pembuluh darah utama
    "thal": 3  # Normal thalium stress test result
}

# Transformasi input menjadi format yang bisa diprediksi
input_data = scaler.transform([list(user_input.values())])

# Prediksi dengan masing-masing model
knn_prediction = predict_with_saved_model('knn_model.pkl', input_data)
svm_prediction = predict_with_saved_model('svm_model.pkl', input_data)
rf_prediction = predict_with_saved_model('rf_model.pkl', input_data)

print("Hasil Prediksi untuk KNN:", knn_prediction[0])
print("Hasil Prediksi untuk SVM:", svm_prediction[0])
print("Hasil Prediksi untuk Random Forest:", rf_prediction[0])